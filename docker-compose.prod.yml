version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: hospital_db_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - hospital_network_prod
    restart: unless-stopped

  # Django Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: hospital_backend_prod
    command: gunicorn hospital_api.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
    expose:
      - 8000
    environment:
      - DEBUG=False
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    depends_on:
      - db
    networks:
      - hospital_network_prod
    restart: unless-stopped

  # React Frontend (built and served by nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: hospital_frontend_prod
    volumes:
      - frontend_build:/app/dist
    networks:
      - hospital_network_prod
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    build:
      context: ./deployment/nginx
      dockerfile: Dockerfile
    container_name: hospital_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - frontend_build:/var/www/html
      - ./deployment/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - hospital_network_prod
    restart: unless-stopped

volumes:
  postgres_data_prod:
  static_volume:
  media_volume:
  frontend_build:

networks:
  hospital_network_prod:
    driver: bridge
