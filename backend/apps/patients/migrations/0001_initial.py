# Generated by Django 4.2.7 on 2025-06-21 09:25

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Patient",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "patient_id",
                    models.CharField(
                        help_text="Unique patient identifier",
                        max_length=20,
                        unique=True,
                    ),
                ),
                (
                    "blood_type",
                    models.CharField(
                        choices=[
                            ("A+", "A+"),
                            ("A-", "A-"),
                            ("B+", "B+"),
                            ("B-", "B-"),
                            ("AB+", "AB+"),
                            ("AB-", "AB-"),
                            ("O+", "O+"),
                            ("O-", "O-"),
                            ("UNK", "Unknown"),
                        ],
                        default="UNK",
                        help_text="Patient's blood type",
                        max_length=3,
                    ),
                ),
                (
                    "height",
                    models.FloatField(
                        blank=True,
                        help_text="Height in meters",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.1),
                            django.core.validators.MaxValueValidator(3.0),
                        ],
                    ),
                ),
                (
                    "weight",
                    models.FloatField(
                        blank=True,
                        help_text="Weight in kilograms",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.1),
                            django.core.validators.MaxValueValidator(1000.0),
                        ],
                    ),
                ),
                (
                    "marital_status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("single", "Single"),
                            ("married", "Married"),
                            ("divorced", "Divorced"),
                            ("widowed", "Widowed"),
                            ("separated", "Separated"),
                            ("other", "Other"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                ("occupation", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "insurance_provider",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "insurance_policy_number",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "insurance_group_number",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "allergies",
                    models.TextField(
                        blank=True, help_text="Known allergies and reactions", null=True
                    ),
                ),
                (
                    "chronic_conditions",
                    models.TextField(
                        blank=True, help_text="Chronic medical conditions", null=True
                    ),
                ),
                (
                    "current_medications",
                    models.TextField(
                        blank=True,
                        help_text="Current medications and dosages",
                        null=True,
                    ),
                ),
                (
                    "family_medical_history",
                    models.TextField(
                        blank=True, help_text="Family medical history", null=True
                    ),
                ),
                (
                    "surgical_history",
                    models.TextField(
                        blank=True,
                        help_text="Previous surgeries and procedures",
                        null=True,
                    ),
                ),
                ("registration_date", models.DateTimeField(auto_now_add=True)),
                ("last_visit_date", models.DateTimeField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                (
                    "notes",
                    models.TextField(
                        blank=True, help_text="Additional notes", null=True
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        limit_choices_to={"role": "patient"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="patient_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Patient",
                "verbose_name_plural": "Patients",
                "db_table": "patients_patient",
                "ordering": ["-registration_date"],
            },
        ),
        migrations.CreateModel(
            name="MedicalRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("record_id", models.CharField(max_length=20, unique=True)),
                (
                    "record_type",
                    models.CharField(
                        choices=[
                            ("consultation", "Consultation"),
                            ("diagnosis", "Diagnosis"),
                            ("treatment", "Treatment"),
                            ("prescription", "Prescription"),
                            ("lab_result", "Lab Result"),
                            ("imaging", "Imaging"),
                            ("surgery", "Surgery"),
                            ("vaccination", "Vaccination"),
                            ("discharge", "Discharge Summary"),
                            ("other", "Other"),
                        ],
                        default="consultation",
                        max_length=20,
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Brief title of the record", max_length=200
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="Detailed description of the visit/treatment"
                    ),
                ),
                ("symptoms", models.TextField(blank=True, null=True)),
                ("diagnosis", models.TextField(blank=True, null=True)),
                ("treatment_plan", models.TextField(blank=True, null=True)),
                ("medications_prescribed", models.TextField(blank=True, null=True)),
                ("follow_up_instructions", models.TextField(blank=True, null=True)),
                (
                    "temperature",
                    models.FloatField(
                        blank=True, help_text="Temperature in Celsius", null=True
                    ),
                ),
                ("blood_pressure_systolic", models.IntegerField(blank=True, null=True)),
                (
                    "blood_pressure_diastolic",
                    models.IntegerField(blank=True, null=True),
                ),
                (
                    "heart_rate",
                    models.IntegerField(
                        blank=True, help_text="Heart rate in BPM", null=True
                    ),
                ),
                (
                    "respiratory_rate",
                    models.IntegerField(
                        blank=True, help_text="Breaths per minute", null=True
                    ),
                ),
                (
                    "oxygen_saturation",
                    models.FloatField(
                        blank=True, help_text="SpO2 percentage", null=True
                    ),
                ),
                ("visit_date", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("is_confidential", models.BooleanField(default=False)),
                (
                    "attachments",
                    models.FileField(
                        blank=True,
                        help_text="Lab results, images, or other documents",
                        null=True,
                        upload_to="medical_records/",
                    ),
                ),
                (
                    "doctor",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to={"role": "doctor"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="medical_records_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "patient",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="medical_records",
                        to="patients.patient",
                    ),
                ),
            ],
            options={
                "verbose_name": "Medical Record",
                "verbose_name_plural": "Medical Records",
                "db_table": "patients_medical_record",
                "ordering": ["-visit_date"],
            },
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(
                fields=["patient_id"], name="patients_pa_patient_927c52_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(
                fields=["blood_type"], name="patients_pa_blood_t_60f43c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(
                fields=["registration_date"], name="patients_pa_registr_b5cb97_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="patient",
            index=models.Index(
                fields=["is_active"], name="patients_pa_is_acti_54ba9f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="medicalrecord",
            index=models.Index(
                fields=["record_id"], name="patients_me_record__49e9c3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="medicalrecord",
            index=models.Index(
                fields=["patient", "visit_date"], name="patients_me_patient_34f754_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="medicalrecord",
            index=models.Index(
                fields=["record_type"], name="patients_me_record__458224_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="medicalrecord",
            index=models.Index(
                fields=["visit_date"], name="patients_me_visit_d_de8606_idx"
            ),
        ),
    ]
