# Docker Compose Override for Local Development
# This file is automatically loaded by docker-compose and overrides settings in docker-compose.yml

version: '3.8'

services:
  # Backend overrides for development
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    environment:
      - DJANGO_SETTINGS_MODULE=hospital_management.settings.development
      - DEBUG=True
      - ENVIRONMENT=development
      - RELOAD=True
    volumes:
      - ./backend:/app
      - backend_static_dev:/app/staticfiles
      - backend_media_dev:/app/media
      - ./logs:/app/logs
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "
    ports:
      - "8000:8000"
      - "8001:8001"  # For debugging

  # Frontend overrides for development
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=development
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - FAST_REFRESH=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - frontend_build_dev:/app/dist
    command: npm run dev -- --host 0.0.0.0 --port 5173
    ports:
      - "3000:3000"
      - "5173:5173"

  # Database overrides for development
  postgres:
    environment:
      - POSTGRES_DB=hospital_management_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
      - ./scripts/postgres-init-dev.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"

  # Redis overrides for development
  redis:
    command: redis-server --appendonly yes --requirepass ""
    volumes:
      - redis_data_dev:/data
    ports:
      - "6379:6379"

  # Celery Worker overrides for development
  celery_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      - DJANGO_SETTINGS_MODULE=hospital_management.settings.development
      - DEBUG=True
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    command: celery -A hospital_management worker --loglevel=debug --reload

  # Celery Beat overrides for development
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    environment:
      - DJANGO_SETTINGS_MODULE=hospital_management.settings.development
      - DEBUG=True
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    command: celery -A hospital_management beat --loglevel=debug --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # Development-specific services
  
  # Flower for Celery monitoring
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: hospital_flower_dev
    restart: unless-stopped
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/4
      - CELERY_RESULT_BACKEND=redis://redis:6379/5
      - FLOWER_BASIC_AUTH=admin:admin123
    ports:
      - "5555:5555"
    networks:
      - hospital_network
    depends_on:
      - redis
    command: celery -A hospital_management flower --port=5555

  # MailHog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: hospital_mailhog_dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP server
      - "8025:8025"  # Web interface
    networks:
      - hospital_network

  # Adminer for database management
  adminer:
    image: adminer:latest
    container_name: hospital_adminer_dev
    restart: unless-stopped
    ports:
      - "8080:8080"
    networks:
      - hospital_network
    depends_on:
      - postgres
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha

  # Redis Commander for Redis management
  redis_commander:
    image: rediscommander/redis-commander:latest
    container_name: hospital_redis_commander_dev
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379
      - HTTP_USER=admin
      - HTTP_PASSWORD=admin123
    ports:
      - "8081:8081"
    networks:
      - hospital_network
    depends_on:
      - redis

  # Jupyter Notebook for data analysis (optional)
  jupyter:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: hospital_jupyter_dev
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=hospital_management.settings.development
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./backend:/app
      - ./notebooks:/app/notebooks
      - ./data:/app/data
    ports:
      - "8888:8888"
    networks:
      - hospital_network
    depends_on:
      - postgres
      - redis
    command: >
      sh -c "
        pip install jupyter jupyterlab pandas matplotlib seaborn &&
        jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='' --NotebookApp.password=''
      "
    profiles:
      - jupyter

  # Storybook for component development (optional)
  storybook:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: hospital_storybook_dev
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "6006:6006"
    networks:
      - hospital_network
    command: npm run storybook
    profiles:
      - storybook

  # Documentation server (optional)
  docs:
    image: nginx:alpine
    container_name: hospital_docs_dev
    restart: unless-stopped
    volumes:
      - ./docs:/usr/share/nginx/html:ro
    ports:
      - "8082:80"
    networks:
      - hospital_network
    profiles:
      - docs

# Development-specific volumes
volumes:
  postgres_data_dev:
    driver: local
  redis_data_dev:
    driver: local
  backend_static_dev:
    driver: local
  backend_media_dev:
    driver: local
  frontend_build_dev:
    driver: local

# Development-specific networks
networks:
  hospital_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16
